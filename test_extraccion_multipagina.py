"""
Script para probar la funcionalidad de extracci√≥n multip√°gina.
Procesa los PDFs de prueba generados y muestra los resultados.
"""

from src.pdf_extractor import PDFExtractor
import os


def probar_pdf(extractor, pdf_filename, descripcion):
    """
    Procesa un PDF y muestra los resultados.

    Args:
        extractor: Instancia de PDFExtractor
        pdf_filename: Nombre del archivo PDF
        descripcion: Descripci√≥n del caso de prueba
    """
    print("\n" + "="*70)
    print(f"  {descripcion}")
    print("="*70)

    pdf_path = os.path.join("facturas", pdf_filename)

    if not os.path.exists(pdf_path):
        print(f"‚ùå Archivo no encontrado: {pdf_path}")
        print("   Ejecuta primero: python crear_pdf_prueba.py")
        return

    print(f"\nüìÑ Procesando: {pdf_filename}")

    try:
        # Extraer datos usando el nuevo m√©todo multip√°gina
        facturas = extractor.extraer_datos_factura_multipagina(pdf_path, 'test_provider')

        print(f"\n‚úÖ Extra√≠das {len(facturas)} factura(s)\n")

        # Mostrar resultados
        for i, factura in enumerate(facturas, 1):
            num_factura = factura.get('NumFactura', 'N/A')
            base = factura.get('Base', 'N/A')
            pagina = factura.get('_Pagina', 'N/A')
            total_paginas = factura.get('_Total_Paginas', 'N/A')
            error = factura.get('_Error', None)

            print(f"--- Factura {i} ---")
            print(f"  NumFactura: {num_factura}")
            print(f"  Base: {base}")
            print(f"  Extra√≠da de p√°gina: {pagina}")
            print(f"  Total p√°ginas de esta factura: {total_paginas}")

            if error:
                print(f"  ‚ö†Ô∏è  ERROR: {error}")

            # Mostrar todos los campos est√°ndar
            campos_estandar = ['CIF', 'FechaFactura', 'Trimestre', 'A√±o', 'FechaVto', 'FechaPago', 'ComPaypal']
            for campo in campos_estandar:
                valor = factura.get(campo, '')
                if valor:
                    print(f"  {campo}: {valor}")

            print()

    except Exception as e:
        print(f"‚ùå Error procesando PDF: {e}")


def main():
    print("\n" + "="*70)
    print("  üß™ PRUEBA DE EXTRACCI√ìN MULTIP√ÅGINA")
    print("="*70)

    # Verificar que existen los archivos de prueba
    if not os.path.exists("facturas") or not os.path.exists("plantillas/test_provider.json"):
        print("\n‚ö†Ô∏è  No se encontraron los archivos de prueba.")
        print("   Ejecuta primero: python crear_pdf_prueba.py\n")
        return

    # Crear extractor
    extractor = PDFExtractor(trimestre="Q1", a√±o="2025")

    # Cargar plantillas
    print("\nüìã Cargando plantillas...")
    if not extractor.cargar_plantillas():
        print("‚ùå No se pudieron cargar las plantillas")
        return

    # Caso 1: Una factura en una p√°gina
    probar_pdf(
        extractor,
        "test_1factura_1pagina.pdf",
        "CASO 1: Una factura en una p√°gina"
    )

    # Caso 2: Una factura en tres p√°ginas
    probar_pdf(
        extractor,
        "test_1factura_3paginas.pdf",
        "CASO 2: Una factura en tres p√°ginas"
    )

    # Caso 3: Tres facturas individuales
    probar_pdf(
        extractor,
        "test_3facturas_1pagina.pdf",
        "CASO 3: Tres facturas, una p√°gina cada una"
    )

    # Caso 4: Caso mixto
    probar_pdf(
        extractor,
        "test_mixto.pdf",
        "CASO 4: M√∫ltiples facturas con diferentes n√∫meros de p√°ginas"
    )

    # Caso 5: PDF con error
    probar_pdf(
        extractor,
        "test_error_sin_numfactura.pdf",
        "CASO 5: PDF con p√°gina sin NumFactura (ERROR esperado)"
    )

    print("\n" + "="*70)
    print("  ‚úÖ PRUEBA COMPLETADA")
    print("="*70)
    print("\nüí° Observaciones:")
    print("   - Las facturas multip√°gina se extraen de su √öLTIMA p√°gina")
    print("   - Cada factura se identifica por su NumFactura √∫nico")
    print("   - Las p√°ginas sin NumFactura se marcan como ERROR")
    print("   - El m√©todo mantiene compatibilidad con PDFs de 1 p√°gina")
    print()


if __name__ == "__main__":
    main()
